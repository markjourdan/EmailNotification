<?xml version="1.0"?>
<project name="Shared" default="build" basedir="." xmlns="http://nant.sf.net/release/0.85/nant.xsd">

	<property name="MSBuildPath" value="C:\Windows\Microsoft.NET\Framework\v4.0.30319\MSBuild.exe" />
	
	<!-- System Info -->
	<property name="build.directory" value="${system.directory}\Build" />
	<property name="system.tools.directory" value="${base.directory}\Dependencies"/>
	<property name="nunit.bin.directory" value="${system.tools.directory}\nunit" />
	<property name="ncover.directory" value="${system.tools.directory}\ncover" />
	
	<!-- Database Build -->
	<include buildfile="${build.directory}\Database.build" if="${directory::exists(build.directory)}" />
	<property name="db.files.directory" value="${directory::get-parent-directory(system.directory)}\Database Files" />
	<property name="db.schema.directory" value="${system.directory}\DatabaseFiles" />
	<property name="database.list" value="" unless="${property::exists('database.list')}" />
	<property name="dbcm.bin.directory" value="${system.tools.directory}\dbcm" />
	
	<!-- Build target -->
	<target name="build" description="default target, builds everything" >
		<call target="db.build" if="${target::exists('db.build')}"/>
		<call target="build.project" if="${target::exists('build.project')}" />
	</target>

	<!-- Init Project -->
	<target name="init.project">
		<echo message="Creating virtual directory" />
		<call target="create.branch.vdir" />
	</target>
	
	<property name="windows.sdk.bin.path" value="C:\Program Files\Microsoft SDKs\Windows\v6.0A\bin\" />
	
	<!-- Assembly Versioning -->
	<property name="solution.path" value="" />
	<property name="build.type" value="debug" />
	<property name="strong.name.assembly" value="false" />
	
	<target name="version.assemblies">		
		<echo message="********************************************************************"/>
		<echo message="Using version number: ${version.number}" />
		
		<foreach item="File" property="assembly.info">
			<in>
				<items refid="assemblyinfo.fileset" />
			</in>
			<do>
			    <echo message=""/>
			    <echo message="Updating: ${assembly.info}" />
			    <exec program="${system.tools.directory}\UpdateVersion\UpdateVersion.exe" commandline="-b BuildDay -r Increment -i &quot;${assembly.info}&quot; -o &quot;${assembly.info}&quot;" verbose="true" workingdir="${solution.path}" />
			    <exec program="${system.tools.directory}\UpdateVersion\UpdateVersion.exe" commandline="-v File -b BuildDay -r Increment -i &quot;${assembly.info}&quot; -o &quot;${assembly.info}&quot;" verbose="true" workingdir="${solution.path}" />
				<echo message=""/>
			</do>
		</foreach>
		
		<echo message="********************************************************************"/>
	</target>    
	
	<!-- Solution Info -->
	<property name="solution.configuration" value="Debug" />
	<property name="solution.configuration" value="${build.configuration}" if="${property::exists('build.configuration')}" />
	<property name="strong.name.solution" value="false" />
	<property name="shared.included" value="true"/>

	<property name="version.number" value="0.1.0.0" unless="${property::exists('CCNetLabel')}" />
	
	<target name="create_solution_info">
		<echo message="Using version number: ${version.number}" />
		<echo message="Writing solution files to: ${create_solution_info.output.directory}" />
		<echo message="Product Name is: ${create_solution_info.product.name}" />
		<echo message="${create_solution_info.product.name} is being strong named." if="${bool::parse(strong.name.solution)}" />

		<property name="__solution.file.name" value="${create_solution_info.output.directory}\SolutionInfo" />

		<attrib file="${__solution.file.name}.cs" readonly="false" failonerror="false" />


		<asminfo output="${__solution.file.name}.cs" language="CSharp">
			<imports>
				<import namespace="System.Reflection" />
				<import namespace="System.Runtime.CompilerServices" />
			</imports>
			<attributes>
				<attribute type="AssemblyCompanyAttribute" value="ALPHA BUILD" />
				<attribute type="AssemblyProductAttribute" value="ALPHA BUILD" />

				<attribute type="AssemblyVersionAttribute" value="${version.number}" />
				<attribute type="AssemblyDelaySignAttribute" value="false" />
			</attributes>
		</asminfo>
		
	</target>

	<!-- Virtual Directory Info -->	
	<property name="vdir.prefix" value="" />
	<property name="vdir.prefix" value="${branch.name}" if="${property::exists('branch.name') and string::get-length(branch.name) > 0}" />

	<target name="create.2.0.vdir">
		<property name="vdir.name" value="${product.name}\${vdir.path}" />
		<property name="vdir.name" value="${product.name}\${vdir.prefix}\${vdir.path}" if="${property::exists('vdir.prefix') and string::get-length(vdir.prefix) > 0}" />
		<call target="create.vdir" />		
	</target>
	 
	<target name="create.vdir">
		<property name="vdir.authanonymous" value="true" unless="${property::exists('vdir.authanonymous')}"/>
		<property name="vdir.authntlm" value="true" unless="${property::exists('vdir.authntlm')}"/>
		<property name="vdir.authbasic" value="false" unless="${property::exists('vdir.authbasic')}"/>
		<property name="vdir.cachecontrolnocache" value="false" unless="${property::exists('vdir.cachecontrolnocache')}"/>
		
		<echo message="vdir path: ${vdir.path}" />
		<echo message="Vdir: ${vdir.base.directory}\${vdir.path}" />
		<echo message="Vdir Name: ${vdir.name}" />
		<echo message="Vdir Name: ${product.name}\${vdir.path}" />
					
		<mkiisdir dirpath="C:\inetpub\wwwroot" 
			vdirname="${product.name}"
			failonerror="false" 
			iisserver="localhost:9999"
			website="Work" />
	
		<mkiisdir 
			dirpath="C:\inetpub\wwwroot" 
			vdirname="${product.name}\${vdir.prefix}" 
			failonerror="true" 
			if="${property::exists('vdir.prefix') and string::get-length(vdir.prefix) > 0}"
			iisserver="localhost:9999"
			website="Work" />
			
		<mkiisdir 
			dirpath="${vdir.base.directory}\${vdir.path}" 
			vdirname="${vdir.name}" 
			failonerror="true" 
			authntlm="${vdir.authntlm}"
			authanonymous="${vdir.authanonymous}" 
			cachecontrolnocache="${vdir.cachecontrolnocache}" 
			authbasic="${vdir.authbasic}"
			iisserver="localhost:9999"
			website="Work" />
		
	</target>
	
	<target name="create.branch.vdir">
		<echo message="Branch Name: ${branch.name}" />
		<if test="${property::exists('branch.name') and string::get-length(branch.name) > 0}">
			<deliisdir vdirname="${branch.name}" failonerror="false" />
			<mkiisdir dirpath="C:\inetpub\wwwroot" vdirname="${branch.name}" failonerror="true" />
		</if>
	</target>
	
	<!-- Testing Info -->
	
	<!-- Run multiple test dlls -->
	<target name="run.unit.tests.fileset">
		<property name="test.files" value=""/>
		<property name="results.file" value="${results.directory}\results.xml" />
		
		<delete dir="${results.directory}" if="${directory::exists(results.directory)}" failonerror="true" />
		<mkdir dir="${results.directory}" failonerror="true" />
		
		<foreach item="File" property="test.dll">
			<in>
				<items refid="test.dll.fileset" />
			</in>
			<do>
				<property name="test.files" value="${test.files} &quot;${test.dll}&quot;"/>
			</do>
		</foreach>
		
		<exec program="${nunit.bin.directory}\nunit-console.exe" workingdir="${test.directory}">
			<arg value="${test.files}" />
			<arg value="/xml:${results.file}"/>
			<arg value="/nologo"/>
		</exec>
	</target>

	<!-- Run single test dll -->
	<target name="run.unit.tests">
		<property name="results.file" value="${results.directory}\results.xml" />
		<delete dir="${results.directory}" if="${directory::exists(results.directory)}" failonerror="true" />
		<mkdir dir="${results.directory}" failonerror="true" />

		<exec program="${nunit.bin.directory}\nunit-console.exe" workingdir="${test.directory}">
			<arg value="${test.dll}"/>
			<arg value="/xml:${results.file}"/>
			<arg value="/nologo"/>
		</exec>

	</target>

	<!-- Run code coverage on a single dll -->
	<target name="run.test.coverage">
		<!-- <exec program="regsvr32" commandline="/s ${system.directory}\lib\ncover\coverlib.dll" /> -->

		<exec program="${ncover.directory}\ncover.console.exe"
        workingdir="${test.directory}"
        commandline="//w ${test.directory} //x ${results.directory}\${test.dll}-coverage.xml ${nunit.bin.directory}\nunit-console.exe ${test.dll} /xml:${results.directory}\${test.dll}-results.xml /nologo"
        failonerror="false"/>
		
		<!-- <exec program="regsvr32" commandline="/u /s ${ncover.directory}\coverlib.dll" /> -->
	</target>
	
	<!-- Run WatiN tests -->
	<target name="run.watin.tests">
		<property name="nant.onfailure" value="watin.cleanup" />
		<property name="nant.onsuccess" value="watin.cleanup" />
		<property name="test.dll" value="${watin.dll}" />
		<property name="test.directory" value="${watin.test.dir}" />
		<property name="results.directory" value="${directory::get-parent-directory(test.directory)}\results" />
		<property name="waitin.xmlpoke.xpath" value="${waitin.configuration.baseUrl.xpath}" />
		<property name="waitin.xmlpoke.value" value="${waitin.configuration.baseUrl.value}" />
		<xmlpoke file="${test.directory}\${watin.dll}.config" xpath="${waitin.xmlpoke.xpath}" value="${waitin.xmlpoke.value}" />
		<uatconfigedit configPath="${watin.web.config.path}" databasePrefix="${db.name.prefix}" />

		<delete dir="${results.directory}" if="${directory::exists(results.directory)}" failonerror="true" />
		<mkdir dir="${results.directory}" failonerror="true" />

		<exec program="cmd.exe" failonerror="true">
			<arg value="/interactive" />
			<arg value="/c" />	  
			<arg value="${system.directory}\Build\watin.tests.bat" />
			<arg value="${nunit.bin.directory}" />
			<arg value="${test.directory}" />
			<arg value="${test.dll}" />
			<arg value="${results.directory}" />
		</exec>
		
		<call target="watin.cleanup" />
	</target>

	<!-- Cleanup after WatiN tests -->
	<target name="watin.cleanup">
		<property name="nant.onfailure" value="" />
		<property name="nant.onsuccess" value="" />

		<copy file="${watin.web.config.path}.bak" overwrite="True" tofile="${watin.web.config.path}" if="${file::exists(watin.web.config.path +'.bak')}" />
		<delete file="${watin.web.config.path}.bak" if="${file::exists(watin.web.config.path +'.bak')}" />
	</target>

	<!-- Create UAT directory -->
	<target name="create.ua.dir">
		<property name="ua.directory" value="${ua.tests.directory}\${branch.name}\${ua.app.name}" />

		<delete dir="${ua.directory}" if="${directory::exists(ua.directory)}" failonerror="true" />
		<mkdir dir="${ua.directory}" failonerror="true" />

		<copy todir="${ua.directory}" flatten="false">
			<fileset basedir="${system.directory}\${ua.app.name}\UAT">
				<include name="**/*.html" />
			</fileset>
		</copy>
	</target>	

</project>
